import{_ as c,r as n,o as i,c as s,a as e,b as o,d as a,w as l,e as h}from"./app-WXFCxs9o.js";const _={},p=e("h1",{id:"hexagonlayer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hexagonlayer","aria-hidden":"true"},"#"),o(" HexagonLayer")],-1),u={href:"https://deck.gl/docs/api-reference/aggregation-layers/hexagon-layer",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"示例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),o(" 示例")],-1),f=h('<h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><h3 id="radius-number-optional" tabindex="-1"><a class="header-anchor" href="#radius-number-optional" aria-hidden="true">#</a> <code>radius</code> (Number, optional)</h3><p>六边形半径，单位：m，默认：<code>1000</code></p><h3 id="extruded-boolean-optional" tabindex="-1"><a class="header-anchor" href="#extruded-boolean-optional" aria-hidden="true">#</a> <code>extruded</code> (Boolean, optional)</h3><p>是否启用单元格提升。单元格高程比例通过每个单元格中点的计数来确定。如果设置为<code>false</code>，则所有单元格都是平的。默认: <code>false</code></p>',5),g={id:"getposition-function-optional",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#getposition-function-optional","aria-hidden":"true"},"#",-1),b=e("code",null,"getPosition",-1),y={href:"https://deck.gl/docs/developer-guide/using-layers#accessors",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,[o("调用该方法以检索每个点的位置。默认: "),e("code",null,"object => object.position")],-1);function v(L,N){const t=n("ExternalLinkIcon"),r=n("common-code-view"),d=n("ClientOnly");return i(),s("div",null,[p,e("p",null,[e("a",u,[o("HexagonLayer"),a(t)])]),x,a(d,null,{default:l(()=>[a(r,{name:"deckgl-hexagon-layer"})]),_:1}),f,e("h3",g,[m,o(),b,o("("),e("a",y,[o("Function"),a(t)]),o(", optional)")]),k])}const B=c(_,[["render",v],["__file","HexagonLayer.html.vue"]]);export{B as default};
